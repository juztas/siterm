#!/usr/bin/env python3
"""
This part of code is taken from:
   https://web.archive.org/web/20160305151936/http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/
Please respect developer (Sander Marechal) and always keep a reference to URL and also as kudos to him
Changes applied to this code:
    Dedention (Justas Balcas 07/12/2017)
    pylint fixes: with open, split imports, var names, old style class (Justas Balcas 07/12/2017)
"""
from __future__ import print_function
from builtins import str
import sys
import time
from DTNRMLibs.Daemonizer import Daemon
from DTNRMLibs.MainUtilities import getConfig, reCacheConfig, getStreamLogger, getLogger
from DTNRMLibs.FECalls import reportServiceStatus
from SiteFE.ProvisioningService import provisioningService as prsS

CONFIG = getConfig()
COMPONENT = 'ProvisioningService'
LOGGER = getLogger("%s/%s/" % (CONFIG.get('general', 'logDir'), COMPONENT), CONFIG.get(COMPONENT, 'logLevel'))

def getThreads(config):
    outThreads = {}
    for sitename in config.get('general', 'sites').split(','):
        provS = prsS.ProvisioningService(config, LOGGER, sitename)
        outThreads[sitename] = provS
    return outThreads

class MyDaemon(Daemon):
    """ My own Deamon override """
    def run(self):
        """ Run main execution """
        timeeq, currentHour = reCacheConfig(None)
        provThreads = getThreads(CONFIG)
        while True:
            hadFailure = False
            try:
                for sitename, provt in list(provThreads.items()):
                    LOGGER.info('Start worker for %s site', sitename)
                    try:
                        provt.startwork()
                        reportServiceStatus(COMPONENT, 'OK', sitename, LOGGER)
                    except:
                        hadFailure = True
                        reportServiceStatus(COMPONENT, 'FAILED', sitename, LOGGER)
                        excType, excValue = sys.exc_info()[:2]
                        LOGGER.critical("Error details. ErrorType: %s, ErrMsg: %s", str(excType.__name__), excValue)
                time.sleep(10)
            except KeyboardInterrupt as ex:
                LOGGER.critical("Received KeyboardInterrupt: %s ", ex)
                reportServiceStatus(COMPONENT, 'KEYBOARDINTERRUPT', sitename, LOGGER)
                exit(3)
            if hadFailure:
                LOGGER.info('Had Runtime Failure. Sleep for 30 seconds')
                time.sleep(30)
            timeeq, currentHour = reCacheConfig(currentHour)
            if not timeeq:
                LOGGER.info('Re initiating Provisioning Service with new configuration from GIT')
                provThreads = getThreads(getConfig())

if __name__ == "__main__":
    DAEMON = MyDaemon('/tmp/dtnrm-ProvisioningService.pid')
    if len(sys.argv) != 2:
        print('ERROR: Options available: %s ' % DAEMON.availableCommands)
        exit(1)
    if sys.argv[1] in DAEMON.availableCommands:
        if sys.argv[1] == 'startforeground':
            LOGGER = getStreamLogger()
        DAEMON.command(sys.argv[1], sys.argv[0])
    else:
        DAEMON.command('', sys.argv[0])
